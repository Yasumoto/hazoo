from twitter.common import log
from twitter.common.zookeeper.kazoo_client import TwitterKazooClient
from twitter.common.zookeeper.serverset import ServerSet


class Discovery(object):
  class Error(Exception): pass
  class TooManyHeadnodes(Error): pass
  
  def __init__(self, zookeeper_ensemble_url):
    self.zookeeper_ensemble_url = zookeeper_ensemble_url
    self._sdzk = None
    
  def retrieve_headnode_endpoint(self, headnode_path):
    """Find the headnode given a service discovery path
    
    This is generated by getting a twitter.common.zookeeper.serverset.endpoint.ServiceInstance`
        
    :param headnode_path: Serverset Path to look up
    :type headnode_path: str
    :rtype: dict
    
    """    
    log.debug('Taking a look at %s' % headnode_path)
    serverset = ServerSet(self.sdzk, headnode_path)
    service_instances = list(serverset)
    if len(service_instances) > 1:
      raise self.TooManyHeadnodes('Found multiple headnodes at %s' % headnode_path)
    headnode = service_instances[0]
    return headnode.additional_endpoints
    

  @property
  def sdzk(self):
    if self._sdzk is None:
      self._sdzk = TwitterKazooClient.make(hosts='%s:2181' % self.zookeeper_ensemble_url, verbose=False)
      log.debug('Connected to %s' % self._sdzk)
    return self._sdzk
    